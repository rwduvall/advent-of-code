const incomingBytes = `https://adventofcode.com/2024/day/18`
  .split('\n')
  .map((row) => row.split(',').map(Number))
  .map(([x, y]) => ({ x, y }));

const map = `.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
.......................................................................
......................................................................X`
  .split('\n')
  .map((row) => row.split(''));

function dropBytes(byteCount: number) {
  for (let i = 0; i < byteCount; i++) {
    let { x, y } = incomingBytes[i];
    map[y][x] = '#';
  }
}

/// breath first search going up, down, left, right by one space in map
function findPathLength(): number {
  let queue = [{ x: 0, y: 0, distance: 0 }];
  let visited = new Set<string>();

  while (queue.length > 0) {
    let { x, y, distance } = queue.shift()!;
    if (x < 0 || y < 0 || x >= map[0].length || y >= map.length) {
      continue;
    }
    if (map[y][x] === '#') {
      continue;
    }
    if (visited.has(`${x},${y}`)) {
      continue;
    }
    visited.add(`${x},${y}`);
    if (map[y][x] === 'X') {
      return distance;
    }
    queue.push({ x: x + 1, y, distance: distance + 1 });
    queue.push({ x: x - 1, y, distance: distance + 1 });
    queue.push({ x, y: y + 1, distance: distance + 1 });
    queue.push({ x, y: y - 1, distance: distance + 1 });
  }
  return -1;
}

dropBytes(1024);
console.log('Part 1: min steps to reach exit:', findPathLength());

// Part 2
function findByteThatBlocksPath() {
  for (let i = 0; i < incomingBytes.length; i++) {
    let { x, y } = incomingBytes[i];

    map[y][x] = '#';
    const pathLength = findPathLength();
    if (pathLength === -1) {
      console.log('Part 2: path blocked by', `${x},${y}`);
      return;
    }
  }
}

findByteThatBlocksPath();
export {};
